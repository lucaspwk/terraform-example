name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: esc_repo           # set this to your Amazon ECR repository name
  ECS_SERVICE: python-web-svc                 # set this to your Amazon ECS service name
  ECS_CLUSTER: ecs-python-web                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: python-web-task        # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: python-webapp                # set this to the name of the container in the
                                               # containerDefinitions section of your task definition


jobs:

  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Run commands
        run: |
          ls -la
          pwd
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build the Docker image
        id: build-image
        env: 
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          #IMAGE_TAG: python-webapp:${{ github.sha }}
          IMAGE_TAG: ${{ env.CONTAINER_NAME }}
        run: |
          echo "$ECR_REGISTRY"
          echo "$ECR_REPOSITORY:$IMAGE_TAG"
          docker build --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --file proj/Dockerfile proj/.
          # docker build --tag python-webapp:$(date +%s) --file proj/Dockerfile proj/.
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
      - name: Check docker image
        run: docker images | grep python-webapp
        
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
